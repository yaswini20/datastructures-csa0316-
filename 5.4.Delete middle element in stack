#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

typedef struct {
    int items[MAX_SIZE];
    int top;
} Stack;

void initialize(Stack *stack) {
    stack->top = -1;
}

int is_empty(Stack *stack) {
    return stack->top == -1;
}

void push(Stack *stack, int value) {
    if (stack->top < MAX_SIZE - 1) {
        stack->items[++stack->top] = value;
    } else {
        printf("Stack overflow\n");
        exit(EXIT_FAILURE);
    }
}

int pop(Stack *stack) {
    if (!is_empty(stack)) {
        return stack->items[stack->top--];
    } else {
        printf("Stack underflow\n");
        exit(EXIT_FAILURE);
    }
}

void delete_middle(Stack *stack, int size, int current) {
    if (current == size / 2) {
        pop(stack);
        return;
    }

    int temp = pop(stack);
    delete_middle(stack, size, current + 1);
    push(stack, temp);
}

void delete_middle_element(Stack *stack) {
    int size = stack->top + 1;

    if (size > 0) {
        delete_middle(stack, size, 0);
    }
}

int main()
 {
 	printf("Name:Yaswini\nReg No:192324021\n");
    Stack stack;
    initialize(&stack);


    push(&stack, 10);
    push(&stack, 20);
    push(&stack, 30);
    push(&stack, 40);
    push(&stack, 50);

    printf("Stack before deleting the middle element: ");
    for (int i = 0; i <= stack.top; i++) {
        printf("%d ", stack.items[i]);
    }
    printf("\n");

    delete_middle_element(&stack);

    printf("Stack after deleting the middle element: ");
    for (int i = 0; i <= stack.top; i++) {
        printf("%d ", stack.items[i]);
    }
    printf("\n");

    return 0;
}
