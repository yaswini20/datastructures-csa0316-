#include <stdio.h>
#include <stdbool.h>
#define MAX_SIZE 5
struct CircularQueue
{
    int arr[MAX_SIZE];
    int front, rear;
};
void initializeCircularQueue(struct CircularQueue *cq) 
{
    cq->front = -1;
    cq->rear = -1;
}
bool isEmpty(struct CircularQueue *cq)
{
    return (cq->front == -1 && cq->rear == -1);
}
bool isFull(struct CircularQueue *cq) 
{
    return (cq->front == (cq->rear + 1) % MAX_SIZE);
}
void enqueue(struct CircularQueue *cq, int value) 
{
    if (isFull(cq)) 
	{
        printf("Queue is full. Cannot enqueue.\n");
        return;
    }
    if (isEmpty(cq)) 
	{
        cq->front = 0;
        cq->rear = 0;
    } 
	else 
	{
        cq->rear = (cq->rear + 1) % MAX_SIZE;
    }
    cq->arr[cq->rear] = value;
}
void dequeue(struct CircularQueue *cq) 
{
    if (isEmpty(cq)) 
	{
        printf("Queue is empty. Cannot dequeue.\n");
        return;
    }
    if (cq->front == cq->rear) 
	{
        initializeCircularQueue(cq);
    }
	else 
	{
        cq->front = (cq->front + 1) % MAX_SIZE;
    }
}
void display(struct CircularQueue *cq) 
{
    if (isEmpty(cq)) 
	{
        printf("Queue is empty.\n");
        return;
    }
    int i = cq->front;
    do 
	{
        printf("%d ", cq->arr[i]);
        i = (i + 1) % MAX_SIZE;
    } 
	while (i != (cq->rear + 1) % MAX_SIZE);
    printf("\n");
}
int front(struct CircularQueue *cq) 
{
    if (isEmpty(cq)) 
	{
        printf("Queue is empty.\n");
        return -1; 
    }
    return cq->arr[cq->front];
}
int rear(struct CircularQueue *cq) 
{
    if (isEmpty(cq)) 
	{
        printf("Queue is empty.\n");
        return -1;
    }
    return cq->arr[cq->rear];
}
int main() 
{
	printf("Name: Yaswini\nReg No:192324021\n");
    struct CircularQueue myCircularQueue;
    initializeCircularQueue(&myCircularQueue);
    enqueue(&myCircularQueue, 10);
    enqueue(&myCircularQueue, 20);
    enqueue(&myCircularQueue, 30);
    enqueue(&myCircularQueue, 40);
    enqueue(&myCircularQueue, 50);
    printf("Circular Queue: ");
    display(&myCircularQueue);
    printf("Front element: %d\n", front(&myCircularQueue));
    printf("Rear element: %d\n", rear(&myCircularQueue));
    dequeue(&myCircularQueue);
    printf("Circular Queue after dequeue: ");
    display(&myCircularQueue);
    return 0;
}
