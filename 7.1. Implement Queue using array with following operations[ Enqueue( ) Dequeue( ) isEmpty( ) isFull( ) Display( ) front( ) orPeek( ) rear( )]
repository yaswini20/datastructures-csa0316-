#include <stdio.h>
#include <stdbool.h>
#define MAX_SIZE 10
struct Queue 
{
    int arr[MAX_SIZE];
    int front, rear;
};
void initializeQueue(struct Queue *queue)
 {
    queue->front = -1;
    queue->rear = -1;
}
bool isEmpty(struct Queue *queue) 
{
    return (queue->front == -1 && queue->rear == -1);

}
bool isFull(struct Queue *queue) 
{
    return (queue->rear + 1) % MAX_SIZE == queue->front;
}
void enqueue(struct Queue *queue, int value)
 {
    if (isFull(queue))
	 {
        printf("Queue is full. Cannot enqueue.\n");
        return;
    }

    if (isEmpty(queue)) 
	{
        queue->front = 0;
        queue->rear = 0;
    } 
	else 
	{
        queue->rear = (queue->rear + 1) % MAX_SIZE;
    }
    queue->arr[queue->rear] = value;
}
void dequeue(struct Queue *queue) 
{
    if (isEmpty(queue)) 
	{
        printf("Queue is empty. Cannot dequeue.\n");
        return;
    }

    if (queue->front == queue->rear) 
	{
        initializeQueue(queue);
    } 
	else 
	{
        queue->front = (queue->front + 1) % MAX_SIZE;
    }
}
void display(struct Queue *queue) 
{
    if (isEmpty(queue))
	 {
        printf("Queue is empty.\n");
        return;
    }
    int i = queue->front;
    while (i != queue->rear)
	 {
        printf("%d ", queue->arr[i]);
        i = (i + 1) % MAX_SIZE;
    }
    printf("%d\n", queue->arr[i]);
}
int front(struct Queue *queue) 
{
    if (isEmpty(queue)) 
	{
        printf("Queue is empty.\n");
        return -1; 
    }
    return queue->arr[queue->front];
}
int rear(struct Queue *queue) 
{
    if (isEmpty(queue)) 
	{
        printf("Queue is empty.\n");
        return -1;
    }
    return queue->arr[queue->rear];
}
int main()
 {
	printf("Name: yaswini\nReg No:192324021\n");
    struct Queue myQueue;
    initializeQueue(&myQueue);
    enqueue(&myQueue, 10);
    enqueue(&myQueue, 20);
    enqueue(&myQueue, 30);
    enqueue(&myQueue, 40);
    enqueue(&myQueue, 50);
    printf("Queue: ");
    display(&myQueue);
    printf("Front element: %d\n", front(&myQueue));
    printf("Rear element: %d\n", rear(&myQueue));
    dequeue(&myQueue);
    printf("Queue after dequeue: ");
    display(&myQueue);
    return 0;
}
